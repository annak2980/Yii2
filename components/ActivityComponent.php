<?php
/**
 * Created by PhpStorm.
 * User: USER
 * Date: 20.12.2018
 * Time: 18:44
 */

namespace app\components;
use app\models\Activity;
use yii\web\Response;
use yii\base\Component;

class ActivityComponent extends Component
{
    public $class_activity_form; //В эту переменную можно передать любой вид создаваемой формы

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub обязательно вызывать перед своими изменениями
        //можно произвести какие-либо действия при инициализации компонента

    }

    public function getModel($params=null) {

        $model = new $this->class_activity_form(); //создаем модель с описанными в ActivityForm.php атрибутами
        //подстановка в абстракцию задается в config\web.php настройкой 'class_activity_form'=>'\app\models\ActivityForm'

        if($params){
            $model->load($params);
        }
        return $model;
    }

    /**
     * @param $id
     * @return Activity|array|\yii\db\ActiveRecord|null
     */
    public function getModelFromId($id){
        return Activity::find()->andWhere(['id'=>$id])->one();
    }

    /**
     * @param ActivityForm $model
     * @return ActivityForm|bool
     * @throws \Throwable
     */
    public function processingActivity(&$model){
        //model в параметре передается по ссылке, и все изменения ее реквизитов (user_id) сохранятся
        $model['user_id']=\Yii::$app->user->getIdentity()->id;

        //if ($model->validate()){      //проверка значений модели по описанным правилам rules()
        if ($model->save()){


            return true;
        }

        return false;
    }

    public function validateAjax($model) {

        \Yii::$app->response->format=Response::FORMAT_JSON;
        return   $model->validate($model); //аналогично можно вызвать статическую ф-цию ActiveForm::validate($model);
    }

}